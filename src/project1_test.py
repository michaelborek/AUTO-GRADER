import project1
from dataclasses import dataclass, field

@dataclass
class MockInput:
    """
    A utility data class for mocking user input during testing.

    Attributes
    ----------
    test_input_list_1 : list[str]
        A list of test inputs to simulate player guesses.
    test_input_list_2 : list[str]
        A different set of test inputs to simulate player guesses.
    test_input_list_3 : list[str]
        Another set of test inputs to simulate player guesses.
    """
    test_input_list_1: list = field(default_factory=lambda: ['50', '40', '30', '20', '10', '0'])
    test_input_list_2: list = field(default_factory=lambda: ['30', '80', '90', '50', '50', '50', '50'])
    test_input_list_3: list = field(default_factory=lambda: ['28', '40', '90'])

@dataclass
class MockRandom:
    """
    A utility class for mocking random number generation during testing.

    Attributes
    ----------
    test_random_number_1 : int
        A predetermined test random number.
    test_random_number_2 : int
        Another predetermined test random number.
    test_random_number_3 : int
        Another predetermined test random number.
    """
    test_random_number_1: int = 70
    test_random_number_2: int = 85
    test_random_number_3: int = 90

def test_secret_number_range(mocker):
    """
    Test the range of the secret number generated by the game.
    
    The function asserts that the generated secret number is within the range of 0 to 99.

    Parameters
    ----------
    mocker : pytest.fixture
        Fixture for mocking functions.
    """
    games_rules = project1.GamesRules()  # Creates an instance of the GamesRules class

    for _ in range(1000000):  # Repeat test 1000000 times for good measure
        assert 0 <= games_rules.secret_number <= 99, "Secret number is out of range!"

def test_game_lost_scenario(mocker, capfd):
    """
    Verify the game's behavior and outputs when the player loses.
    
    The test ensures that the game provides appropriate feedback messages when the player fails to guess the secret number.

    Parameters
    ----------
    mocker : pytest.fixture
        Fixture for mocking functions.
    capfd : pytest.fixture
        Fixture to capture stdout and stderr for assertions.
    """
    Inputs_Mock = MockInput()
    Random_Mock = MockRandom()

    mocker.patch('project1.random.randint', return_value=Random_Mock.test_random_number_1)
    mocker.patch('project1.input', side_effect=Inputs_Mock.test_input_list_1)
    project1.main()
    
    out, _ = capfd.readouterr()
    assert 'You lost' in out, "Expected 'You lost' in the output, but it was missing."
    assert 'Secret number was' in out, "Expected 'Secret number was' in the output, but it was missing." 
    assert 'You have 0 number of guesses.' in out, "Expected 'You have 0 number of guesses.' in the output, but it was missing."

def test_game_won_scenario(mocker, capfd):
    """
    Verify the game's behavior and outputs when the player wins.
    
    The test checks for the game's feedback on correct guesses and provides feedback on the number of remaining guesses.

    Parameters
    ----------
    mocker : pytest.fixture
        Fixture for mocking functions.
    capfd : pytest.fixture
        Fixture to capture stdout and stderr for assertions.
    """
    Inputs_Mock = MockInput()
    Random_Mock = MockRandom()

    mocker.patch('project1.random.randint', return_value=Random_Mock.test_random_number_2)
    mocker.patch('project1.input', side_effect=Inputs_Mock.test_input_list_2)
    project1.main()
    
    out, _ = capfd.readouterr()
    assert 'Higher' in out, "Expected 'Higher' in the output, but it was missing."
    assert 'Lower' in out, "Expected 'Lower' in the output, but it was missing."
    assert 'You have 5 number of guesses.' in out, "Expected 'You have 5 number of guesses' in the output, but it was missing."
    assert 'You have 4 number of guesses.' in out, "Expected 'You have 4 number of guesses' in the output, but it was missing."

    mocker.patch('project1.random.randint', return_value=Random_Mock.test_random_number_3)
    mocker.patch('project1.input', side_effect=Inputs_Mock.test_input_list_3)
    project1.main()
    
    out, _ = capfd.readouterr()
    assert 'Correct' in out, "Expected 'Correct' in the output, but it was missing."